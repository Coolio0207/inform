React.JS
React is an efficient, declarative, and flexible open-source JavaScript library for building simple, fast and scalable front-ends.
1. What are the advantages of using React?Use of Virtual DOM to improve efficiencyReact uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.Gentle learning curveReact has a gentle learning curve when compared to frameworks like Angular. Anyone with little knowledge of javascript can start building web applications using React.SEO friendlyReact allows developers to develop engaging user interfaces that can be easily navigated in various search engines. It also allows server-side rendering, which boosts the SEO of an app.Reusable componentsReact uses component-based architecture for developing applications. Components are independent and reusable bits of code. These components can be shared across various applications having similar functionality. The re-use of components increases the pace of development.Huge ecosystem of libraries to choose fromReact provides you the freedom to choose the tools, libraries, and architecture for developing an application based on your requirement.
2. What are the differences between functional and class components?Functional Components: These types of components have no state of their own and only contain render methods, and therefore are also called stateless components. They may derive data from other components as props (properties).Class Components: These types of components can hold and manage their own state and have a separate render method to return JSX on the screen. They are also called Stateful components as they can have a state.
3. What is the virtual DOM? How does react use the virtual DOM to render the UI?As stated by the react team, virtual DOM is a concept where a virtual representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM.
4. What are the differences between controlled and uncontrolled components?Controlled and uncontrolled components are just different approaches to handling input form elements in react.Controlled component In a controlled component, the value of the input element is controlled by React.We store the state of the input element inside the code, and by using event-based callbacks, any changes made to the input element will be reflected in the code as well.When a user enters data inside the input element of a controlled component, onChange function gets triggered and inside the code we check whether the value entered is valid or invalid. If the value is valid, we change the state and re-render the input element with new value.Uncontrolled component In an uncontrolled component, the value of the input element is handled by the DOM itself.Input elements inside uncontrolled components work just like normal HTML input form elements.The state of the input element is handled by the DOM. Whenever the value of the input element is changed,event-based callbacks are not called. Basically, react does not perform any action when there are changes made to the input element.
5. What are the different lifecycle methods in React?Every component in React has lifecycle methods that we can tap into, to trigger changes at a particular phase of the life cycle.Each component in react goes through three phases: Mounting, Updating, and Unmounting.There are corresponding lifecycle methods for each of the three phases:
6. How to prevent re-renders in React?Reason for re-renders in React:Re-rendering of a component and it’s child components occur when props or state of the component has been changed.Re-rendering components that are not updated, affects the performance of an application.Parent component is the parent component and Message is the child component. Any change in the parent component will lead to re-rendering of the child component as well.To prevent the re-rendering of child component, we use the shouldComponentUpdate( ) method:
7. Explain React state and props.PropsImmutableHas better performanceCan be passed to child componentsStateOwned by its componentLocally scopedWiteable/Mutablehas setState() method to modify propertiesChanges to state can be asynchronouscan only be passed as propsReact StateEvery component in react has a built-in state object, which contains all the property values that belong to that component.In other words, the state object controls the behaviour of a component. Any change in the property values of the state object leads to re-rendering of the component.React PropsEvery react component, accepts a single object argument called props (which stands for “properties”).These props can be passed to a component using HTML attributes and the component accepts these props as an argument.Using props, we can pass data from one component to another.
8. Explain React Hooks.What are Hooks? Hooks are functions that let us “hook into” React state and lifecycle features from a functional component.React Hooks cannot be used in class components. They let us write components without class.Why were Hooks introduced in React?React hooks were introduced in the 16.8 version of React.Previously, functional components were called stateless components. Only class components were used for state management and lifecycle methods.The need to change a functional component to a class component, whenever state management or lifecycle methods were to be used, led to the development of Hooks.
9. What are the different ways to style a React component?Inline StylingUsing JavaScript objectCSS StylesheetCSS Modules
10. Explain the lifecycle methods of components.getInitialState(): This is executed before the creation of the component.componentDidMount(): Is executed when the component gets rendered and placed on the DOM.shouldComponentUpdate(): Is invoked when a component determines changes to the DOM and returns a “true” or “false” value based on certain conditions.componentDidUpdate(): Is invoked immediately after rendering takes place.componentWillUnmount(): Is invoked immediately before a component is destroyed and unmounted permanently.So far, if you have any doubts about the above React interview questions and answers, please ask your questions in the section below.
11. Name a few techniques to optimize React app performance.There are many ways through which one can optimize the performance of a React app, let’s have a look at some of them:Using useMemo( )It is a React hook that is used for caching CPU-Expensive functions.Sometimes in a React app, a CPU-Expensive function gets called repeatedly due to re-renders of a component, which can lead to slow rendering.useMemo( ) hook can be used to cache such functions. By using useMemo( ), the CPU-Expensive function gets called only when it is needed.Using React.PureComponent -It is a base component class that checks state and props of a component to know whether the component should be updated.Instead of using the simple React.Component, we can use React.PureComponent to reduce the re-renders of a component unnecessarily.Maintaining State Colocation -This is a process of moving the state as close to where you need it as possible.Sometimes in React app, we have a lot of unnecessary states inside the parent component which makes the code less readable and harder to maintain. Not to forget, having many states inside a single component leads to unnecessary re-renders for the component.It is better to shift states which are less valuable to the parent component, to a separate component.Lazy Loading -It is a technique used to reduce the load time of a React app. Lazy loading helps reduce the risk of web app performances to minimal.
12. How to pass data between react components?Parent Component to Child Component (using props)Child Component to Parent Component (using callbacks)Create a callback in the parent component which takes in the data needed as a parameter.Pass this callback as a prop to the child component.Send data from the child component using the callback.
13. What are Higher Order Components?Simply put, Higher Order Component(HOC) is a function that takes in a component and returns a new component.When do we need a Higher Order Component?While developing React applications, we might develop components that are quite similar to each other with minute differences.In most cases, developing similar components might not be an issue but, while developing larger applications we need to keep our code DRY, therefore, we want an abstraction that allows us to define this logic in a single place and share it across components.HOC allows us to create that abstraction.
14.What is Redux?Redux is an open-source, JavaScript library used to manage the application state. React uses Redux to build the user interface. It is a predictable state container for JavaScript applications and is used for the entire application’s state management.
15.What are the components of Redux?Store: Holds the state of the application.Action: The source information for the store.Reducer: Specifies how the application's state changes in response to actions sent to the store.
16.How is Redux different from Flux?1. Redux is an open-source JavaScript library used to manage application StateFlux is an architecture and not a framework or library2. Store’s state is immutableStore’s state is mutable3. Can only have a single-storeCan have multiple stores4. Uses the concept of reducerUses the concept of the dispatcher
17.What is React Router?React Router is a routing library built on top of React, which is used to create routes in a React application.
18. Why do we need to React Router?It maintains consistent structure and behavior and is used to develop single-page web applications.Enables multiple views in a single application by defining multiple routes in the React application.
19.What is the purpose of callback function as an argument of setState()?The callback function is invoked when setState finished and the component gets rendered. Since setState() is asynchronous the callback function is used for any post action.Note: It is recommended to use lifecycle method rather than this callback function.
20.How to bind methods or event handlers in JSX callbacks?Binding in ConstructorPublic class fields syntaxArrow functions in callbacks
21.What is the purpose of using super constructor with props argument?A child class constructor cannot make use of this reference until super() method has been called. The same applies for ES6 sub-classes as well. The main reason of passing props parameter to super() call is to access this.props in your child constructors.
22.What are the core principles of Redux?Redux follows three fundamental principles:Single source of truth: The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.State is read-only: The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.Changes are made with pure functions: To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.
23.What is the proper way to access Redux store?The best way to access your store in a component is to use the connect() function, that creates a new component that wraps around your existing one. This pattern is called Higher-Order Components, and is generally the preferred way of extending a component's functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.
24.What is the difference between component and container in React Redux?Component is a class or function component that describes the presentational part of your application.Container is an informal term for a component that is connected to a Redux store. Containers subscribe to Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.
25.Explain the lifecycle methods of React components in detail.
Some of the most important lifecycle methods are:
componentWillMount() – Executed just before rendering takes place both on the client as well as server-side.
componentDidMount() – Executed on the client side only after the first render.
componentWillReceiveProps() – Invoked as soon as the props are received from the parent class and before another render is called.
shouldComponentUpdate() – Returns true or false value based on certain conditions. If you want your component to update, return true else return false. By default, it returns false.
componentWillUpdate() – Called just before rendering takes place in the DOM.
componentDidUpdate() – Called immediately after rendering takes place.
componentWillUnmount() – Called after the component is unmounted from the DOM. It is used to clear up the memory spaces.

26.What do you understand by refs in React?
Refs is the short hand for References in React. It is an attribute which helps to store a reference to a particular React element or component, which will be returned by the components render configuration function. It is used to return references to a particular element or component returned by render(). They come in handy when we need DOM measurements or to add methods to the components.

27.Explain Flux.
Flux is an architectural pattern which enforces the uni-directional data flow. It controls derived data and enables communication between multiple components using a central Store which has authority for all data. Any update in data throughout the application must occur here only. Flux provides stability to the application and reduces run-time errors.

28.Explain the role of Reducer.
Reducers are pure functions which specify how the application’s state changes in response to an ACTION. Reducers work by taking in the previous state and action, and then it returns a new state. It determines what sort of update needs to be done based on the type of the action, and then returns new values. It returns the previous state as it is, if no work needs to be done.